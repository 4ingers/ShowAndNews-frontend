{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Site\\\\showandnews\\\\components\\\\layouts\\\\pages\\\\CategoryLayout\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getPostsByCategory($catSlug: String, $offset: Int, $limit: Int) {\\n    getPostCount\\n    getPostsByCategory(catSlug: $catSlug, offset: $offset, limit: $limit) {\\n      id\\n      image\\n      title\\n      content\\n      created_at\\n      category\\n      description\\n      author\\n      tags\\n      slug\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Pagination } from 'antd';\nimport useUpdateEffect from './hooks';\nimport styles from './styles.module.scss';\nimport PostsGrid from '@/components/feed/PostsGrid';\nvar GET_POSTS = gql(_templateObject());\n\nvar CategoryLayout = function CategoryLayout(_ref) {\n  _s();\n\n  var catSlug = _ref.slug;\n  var defaultLimit = 9;\n\n  var _useState = useState(defaultLimit),\n      pageSize = _useState[0],\n      setPageSize = _useState[1];\n\n  var _useState2 = useState(1),\n      current = _useState2[0],\n      setCurrent = _useState2[1];\n\n  var _useState3 = useState(current * pageSize),\n      lastIndex = _useState3[0],\n      setLastIndex = _useState3[1];\n\n  var _useState4 = useState(lastIndex - pageSize),\n      firstIndex = _useState4[0],\n      setFirstIndex = _useState4[1];\n\n  var _useState5 = useState(0),\n      postCount = _useState5[0],\n      setPostCount = _useState5[1];\n\n  useUpdateEffect(function () {\n    window.scroll({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, [current, pageSize]);\n\n  var onShowSizeChange = function onShowSizeChange(_, pageSize) {\n    setCurrent(1);\n    setPageSize(pageSize);\n    setFirstIndex(1);\n    setLastIndex(pageSize);\n    onFetchMore(firstIndex - 1, pageSize);\n  };\n\n  var onCurrentChange = function onCurrentChange(page) {\n    setCurrent(page);\n    setLastIndex(current * pageSize);\n    setFirstIndex(lastIndex - pageSize);\n    onFetchMore(firstIndex - 1, pageSize);\n  };\n\n  var _useQuery = useQuery(GET_POSTS, {\n    variables: {\n      catSlug: catSlug,\n      offset: 0,\n      limit: defaultLimit\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      _useQuery$data = _useQuery.data,\n      total = _useQuery$data.getPostCount,\n      fetchedPosts = _useQuery$data.getPostsByCategory;\n\n  if (error) return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430!\");\n  if (loading) return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 23\n    }\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\");\n  useEffect(function () {\n    if (total) setPostCount(total);\n  }, [total]);\n  var posts = data.getPostsByCategory.map(function (post) {\n    return {\n      title: post.title,\n      description: post.description,\n      content: post.content,\n      datetime: post.created_at,\n      category: post.category,\n      tags: post.tags,\n      image: post.image,\n      slug: post.slug\n    };\n  });\n\n  var onFetchMore = function onFetchMore(offset, limit) {\n    fetchMore({\n      variables: {\n        catSlug: catSlug,\n        offset: offset,\n        limit: limit\n      },\n      updateQuery: function updateQuery(_, _ref2) {\n        var fetchMoreResult = _ref2.fetchMoreResult;\n        if (!fetchMoreResult) __jsx(\"h1\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 11\n          }\n        }, \"Couldn't load other posts...\");\n        setPostCount(fetchMoreResult.getPostCount);\n        return fetchMoreResult;\n      }\n    });\n  };\n\n  return __jsx(\"section\", {\n    className: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.row,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: styles.featuredPostsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, __jsx(PostsGrid, {\n    posts: posts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }), __jsx(Pagination, {\n    showSizeChanger: true,\n    onShowSizeChange: onShowSizeChange,\n    pageSize: pageSize,\n    total: postCount,\n    defaultCurrent: current,\n    onChange: onCurrentChange,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(CategoryLayout, \"PDBLgt0k/pPN6z3xJKYiRxTBWto=\", false, function () {\n  return [useUpdateEffect, useQuery];\n});\n\n_c = CategoryLayout;\nexport default CategoryLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryLayout\");","map":{"version":3,"sources":["D:/Site/showandnews/components/layouts/pages/CategoryLayout/index.js"],"names":["useState","useMemo","useQuery","gql","Pagination","useUpdateEffect","styles","PostsGrid","GET_POSTS","CategoryLayout","catSlug","slug","defaultLimit","pageSize","setPageSize","current","setCurrent","lastIndex","setLastIndex","firstIndex","setFirstIndex","postCount","setPostCount","window","scroll","top","behavior","onShowSizeChange","_","onFetchMore","onCurrentChange","page","variables","offset","limit","loading","error","data","total","getPostCount","fetchedPosts","getPostsByCategory","useEffect","posts","map","post","title","description","content","datetime","created_at","category","tags","image","fetchMore","updateQuery","fetchMoreResult","container","row","featuredPostsContainer"],"mappings":"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","sourcesContent":["import { useState, useMemo } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { gql } from 'apollo-boost'\r\nimport { Pagination } from 'antd'\r\n\r\nimport useUpdateEffect from './hooks'\r\nimport styles from './styles.module.scss'\r\nimport PostsGrid from '@/components/feed/PostsGrid'\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query getPostsByCategory($catSlug: String, $offset: Int, $limit: Int) {\r\n    getPostCount\r\n    getPostsByCategory(catSlug: $catSlug, offset: $offset, limit: $limit) {\r\n      id\r\n      image\r\n      title\r\n      content\r\n      created_at\r\n      category\r\n      description\r\n      author\r\n      tags\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\n\r\nconst CategoryLayout = ({ slug: catSlug }) => {\r\n  const defaultLimit = 9\r\n  \r\n  const [pageSize, setPageSize] = useState(defaultLimit)\r\n  const [current, setCurrent] = useState(1)\r\n  const [lastIndex, setLastIndex] = useState(current * pageSize)\r\n  const [firstIndex, setFirstIndex] = useState(lastIndex - pageSize)\r\n  const [postCount, setPostCount] = useState(0);\r\n\r\n  useUpdateEffect(() => {\r\n    window.scroll({ top: 0, behavior: 'smooth' })\r\n  }, [current, pageSize])\r\n\r\n  const onShowSizeChange = (_, pageSize) => {\r\n    setCurrent(1)\r\n    setPageSize(pageSize)\r\n    setFirstIndex(1)\r\n    setLastIndex(pageSize)\r\n    onFetchMore(firstIndex - 1, pageSize)\r\n  }\r\n\r\n  const onCurrentChange = (page) => {\r\n    setCurrent(page)\r\n    setLastIndex(current * pageSize)\r\n    setFirstIndex(lastIndex - pageSize)\r\n    onFetchMore(firstIndex - 1, pageSize)\r\n  }\r\n  \r\n  const { loading, error, data: {\r\n    getPostCount: total, \r\n    getPostsByCategory: fetchedPosts} \r\n  } = useQuery(GET_POSTS, {\r\n    variables: {\r\n      catSlug,\r\n      offset: 0,\r\n      limit: defaultLimit\r\n    }\r\n  })\r\n  if (error) return <h1>Ошибка!</h1>\r\n  if (loading) return <h1>Загрузка...</h1>\r\n\r\n  useEffect(() => {\r\n    if (total)\r\n      setPostCount(total)\r\n  }, [total]);\r\n  \r\n  const posts = data.getPostsByCategory.map((post) => ({\r\n    title: post.title,\r\n    description: post.description,\r\n    content: post.content,\r\n    datetime: post.created_at,\r\n    category: post.category,\r\n    tags: post.tags,\r\n    image: post.image,\r\n    slug: post.slug\r\n  }))\r\n\r\n  const onFetchMore = (offset, limit) => {\r\n    fetchMore({\r\n      variables: {\r\n        catSlug,\r\n        offset,\r\n        limit\r\n      },\r\n      updateQuery: (_, { fetchMoreResult }) => {\r\n        if (!fetchMoreResult)\r\n          <h1>Couldn't load other posts...</h1>\r\n        setPostCount(fetchMoreResult.getPostCount)\r\n        return fetchMoreResult\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <section className={styles.container}>\r\n      <div className={styles.row}>\r\n        <section className={styles.featuredPostsContainer}>\r\n          <PostsGrid posts={posts} />\r\n          <Pagination\r\n            showSizeChanger\r\n            onShowSizeChange={onShowSizeChange}\r\n            pageSize={pageSize}\r\n            total={postCount}\r\n            defaultCurrent={current}\r\n            onChange={onCurrentChange}\r\n          />\r\n        </section>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CategoryLayout"]},"metadata":{},"sourceType":"module"}