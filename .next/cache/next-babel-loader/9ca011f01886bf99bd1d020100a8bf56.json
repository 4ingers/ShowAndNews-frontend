{"ast":null,"code":"var _jsxFileName = \"D:\\\\Site\\\\showandnews\\\\components\\\\layouts\\\\pages\\\\CategoryLayout\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Pagination } from 'antd';\nimport useUpdateEffect from './hooks';\nimport styles from './styles.module.scss';\nimport PostsGrid from '@/components/feed/PostsGrid';\nconst GET_POSTS = gql`\n  query getPostsByCategory($catSlug: String, $offset: Int, $limit: Int) {\n    getPostCount\n    getPostsByCategory(catSlug: $catSlug, offset: $offset, limit: $limit) {\n      id\n      image\n      title\n      content\n      created_at\n      category\n      description\n      author\n      tags\n      slug\n    }\n  }\n`;\n\nconst CategoryLayout = ({\n  slug: catSlug\n}) => {\n  const defaultLimit = 9;\n  const {\n    0: pageSize,\n    1: setPageSize\n  } = useState(defaultLimit);\n  const {\n    0: currentPage,\n    1: setCurrent\n  } = useState(1);\n  const {\n    0: lastIndex,\n    1: setLastIndex\n  } = useState(currentPage * pageSize);\n  const {\n    0: firstIndex,\n    1: setFirstIndex\n  } = useState(lastIndex - pageSize);\n  const {\n    0: total,\n    1: setTotal\n  } = useState(0);\n  useUpdateEffect(() => {\n    window.scroll({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, [currentPage, pageSize]);\n\n  const onShowSizeChange = (_, pageSize) => {\n    setCurrent(1);\n    setPageSize(pageSize);\n    setFirstIndex(1);\n    setLastIndex(pageSize);\n    onFetchMore(firstIndex - 1, pageSize);\n  };\n\n  const onCurrentChange = page => {\n    setCurrent(page);\n    setLastIndex(currentPage * pageSize);\n    setFirstIndex(lastIndex - pageSize);\n    onFetchMore(firstIndex - 1, pageSize);\n  };\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_POSTS, {\n    variables: {\n      catSlug,\n      offset: currentPage - 1,\n      limit: defaultLimit\n    }\n  });\n  if (error) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }\n  }, \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430!\");\n  if (loading) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 23\n    }\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"); // useEffect(() => {\n  //   if (data.getPostCount)\n  //     setPostCount(data.postCount)\n  // }, [data.postCount]);\n\n  const posts = data.getPostsByCategory.map(post => ({\n    title: post.title,\n    description: post.description,\n    content: post.content,\n    datetime: post.created_at,\n    category: post.category,\n    tags: post.tags,\n    image: post.image,\n    slug: post.slug\n  })); // const onFetchMore = (offset, limit) => {\n  //   fetchMore({\n  //     variables: {\n  //       catSlug,\n  //       offset,\n  //       limit\n  //     },\n  //     updateQuery: (_, { fetchMoreResult }) => {\n  //       if (!fetchMoreResult)\n  //         <h1>Couldn't load other posts...</h1>\n  //       setPostCount(fetchMoreResult.getPostCount)\n  //       return fetchMoreResult\n  //     }\n  //   })\n  // }\n\n  return __jsx(\"section\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: styles.featuredPostsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, __jsx(PostsGrid, {\n    posts: posts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), __jsx(Pagination, {\n    showSizeChanger: true,\n    onShowSizeChange: onShowSizeChange,\n    pageSize: pageSize,\n    total: total,\n    defaultCurrent: currentPage,\n    onChange: onCurrentChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CategoryLayout;","map":{"version":3,"sources":["D:/Site/showandnews/components/layouts/pages/CategoryLayout/index.js"],"names":["useState","useEffect","useQuery","gql","Pagination","useUpdateEffect","styles","PostsGrid","GET_POSTS","CategoryLayout","slug","catSlug","defaultLimit","pageSize","setPageSize","currentPage","setCurrent","lastIndex","setLastIndex","firstIndex","setFirstIndex","total","setTotal","window","scroll","top","behavior","onShowSizeChange","_","onFetchMore","onCurrentChange","page","loading","error","data","variables","offset","limit","posts","getPostsByCategory","map","post","title","description","content","datetime","created_at","category","tags","image","container","row","featuredPostsContainer"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,OAAOC,eAAP,MAA4B,SAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAGA,MAAMC,SAAS,GAAGL,GAAI;;;;;;;;;;;;;;;;CAAtB;;AAmBA,MAAMM,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAEC;AAAR,CAAD,KAAuB;AAC5C,QAAMC,YAAY,GAAG,CAArB;AAEA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0Bd,QAAQ,CAACY,YAAD,CAAxC;AACA,QAAM;AAAA,OAACG,WAAD;AAAA,OAAcC;AAAd,MAA4BhB,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM;AAAA,OAACiB,SAAD;AAAA,OAAYC;AAAZ,MAA4BlB,QAAQ,CAACe,WAAW,GAAGF,QAAf,CAA1C;AACA,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8BpB,QAAQ,CAACiB,SAAS,GAAGJ,QAAb,CAA5C;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBtB,QAAQ,CAAC,CAAD,CAAlC;AAEAK,EAAAA,eAAe,CAAC,MAAM;AACpBkB,IAAAA,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,QAAQ,EAAE;AAApB,KAAd;AACD,GAFc,EAEZ,CAACX,WAAD,EAAcF,QAAd,CAFY,CAAf;;AAIA,QAAMc,gBAAgB,GAAG,CAACC,CAAD,EAAIf,QAAJ,KAAiB;AACxCG,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAF,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAO,IAAAA,aAAa,CAAC,CAAD,CAAb;AACAF,IAAAA,YAAY,CAACL,QAAD,CAAZ;AACAgB,IAAAA,WAAW,CAACV,UAAU,GAAG,CAAd,EAAiBN,QAAjB,CAAX;AACD,GAND;;AAQA,QAAMiB,eAAe,GAAIC,IAAD,IAAU;AAChCf,IAAAA,UAAU,CAACe,IAAD,CAAV;AACAb,IAAAA,YAAY,CAACH,WAAW,GAAGF,QAAf,CAAZ;AACAO,IAAAA,aAAa,CAACH,SAAS,GAAGJ,QAAb,CAAb;AACAgB,IAAAA,WAAW,CAACV,UAAU,GAAG,CAAd,EAAiBN,QAAjB,CAAX;AACD,GALD;;AAOA,QAAM;AAAEmB,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BhC,QAAQ,CAACM,SAAD,EAAY;AACnD2B,IAAAA,SAAS,EAAE;AACTxB,MAAAA,OADS;AAETyB,MAAAA,MAAM,EAAGrB,WAAW,GAAG,CAFd;AAGTsB,MAAAA,KAAK,EAAEzB;AAHE;AADwC,GAAZ,CAAzC;AAOA,MAAIqB,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAAP,CApC+B,CAsC5C;AACA;AACA;AACA;;AAEA,QAAMM,KAAK,GAAGJ,IAAI,CAACK,kBAAL,CAAwBC,GAAxB,CAA6BC,IAAD,KAAW;AACnDC,IAAAA,KAAK,EAAED,IAAI,CAACC,KADuC;AAEnDC,IAAAA,WAAW,EAAEF,IAAI,CAACE,WAFiC;AAGnDC,IAAAA,OAAO,EAAEH,IAAI,CAACG,OAHqC;AAInDC,IAAAA,QAAQ,EAAEJ,IAAI,CAACK,UAJoC;AAKnDC,IAAAA,QAAQ,EAAEN,IAAI,CAACM,QALoC;AAMnDC,IAAAA,IAAI,EAAEP,IAAI,CAACO,IANwC;AAOnDC,IAAAA,KAAK,EAAER,IAAI,CAACQ,KAPuC;AAQnDvC,IAAAA,IAAI,EAAE+B,IAAI,CAAC/B;AARwC,GAAX,CAA5B,CAAd,CA3C4C,CAsD5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACE;AAAS,IAAA,SAAS,EAAEJ,MAAM,CAAC4C,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAE5C,MAAM,CAAC6C,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAE7C,MAAM,CAAC8C,sBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAEd,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD;AACE,IAAA,eAAe,MADjB;AAEE,IAAA,gBAAgB,EAAEX,gBAFpB;AAGE,IAAA,QAAQ,EAAEd,QAHZ;AAIE,IAAA,KAAK,EAAEQ,KAJT;AAKE,IAAA,cAAc,EAAEN,WALlB;AAME,IAAA,QAAQ,EAAEe,eANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CADF;AAiBD,CAvFD;;AAyFA,eAAerB,cAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { gql } from 'apollo-boost'\r\nimport { Pagination } from 'antd'\r\n\r\nimport useUpdateEffect from './hooks'\r\nimport styles from './styles.module.scss'\r\nimport PostsGrid from '@/components/feed/PostsGrid'\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query getPostsByCategory($catSlug: String, $offset: Int, $limit: Int) {\r\n    getPostCount\r\n    getPostsByCategory(catSlug: $catSlug, offset: $offset, limit: $limit) {\r\n      id\r\n      image\r\n      title\r\n      content\r\n      created_at\r\n      category\r\n      description\r\n      author\r\n      tags\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\n\r\nconst CategoryLayout = ({ slug: catSlug }) => {\r\n  const defaultLimit = 9\r\n  \r\n  const [pageSize, setPageSize] = useState(defaultLimit)\r\n  const [currentPage, setCurrent] = useState(1)\r\n  const [lastIndex, setLastIndex] = useState(currentPage * pageSize)\r\n  const [firstIndex, setFirstIndex] = useState(lastIndex - pageSize)\r\n  const [total, setTotal] = useState(0);\r\n\r\n  useUpdateEffect(() => {\r\n    window.scroll({ top: 0, behavior: 'smooth' })\r\n  }, [currentPage, pageSize])\r\n\r\n  const onShowSizeChange = (_, pageSize) => {\r\n    setCurrent(1)\r\n    setPageSize(pageSize)\r\n    setFirstIndex(1)\r\n    setLastIndex(pageSize)\r\n    onFetchMore(firstIndex - 1, pageSize)\r\n  }\r\n\r\n  const onCurrentChange = (page) => {\r\n    setCurrent(page)\r\n    setLastIndex(currentPage * pageSize)\r\n    setFirstIndex(lastIndex - pageSize)\r\n    onFetchMore(firstIndex - 1, pageSize)\r\n  }\r\n  \r\n  const { loading, error, data } = useQuery(GET_POSTS, {\r\n    variables: {\r\n      catSlug,\r\n      offset: (currentPage - 1),\r\n      limit: defaultLimit\r\n    }\r\n  })\r\n  if (error) return <h1>Ошибка!</h1>\r\n  if (loading) return <h1>Загрузка...</h1>\r\n\r\n  // useEffect(() => {\r\n  //   if (data.getPostCount)\r\n  //     setPostCount(data.postCount)\r\n  // }, [data.postCount]);\r\n  \r\n  const posts = data.getPostsByCategory.map((post) => ({\r\n    title: post.title,\r\n    description: post.description,\r\n    content: post.content,\r\n    datetime: post.created_at,\r\n    category: post.category,\r\n    tags: post.tags,\r\n    image: post.image,\r\n    slug: post.slug\r\n  }))\r\n\r\n  // const onFetchMore = (offset, limit) => {\r\n  //   fetchMore({\r\n  //     variables: {\r\n  //       catSlug,\r\n  //       offset,\r\n  //       limit\r\n  //     },\r\n  //     updateQuery: (_, { fetchMoreResult }) => {\r\n  //       if (!fetchMoreResult)\r\n  //         <h1>Couldn't load other posts...</h1>\r\n  //       setPostCount(fetchMoreResult.getPostCount)\r\n  //       return fetchMoreResult\r\n  //     }\r\n  //   })\r\n  // }\r\n\r\n  return (\r\n    <section className={styles.container}>\r\n      <div className={styles.row}>\r\n        <section className={styles.featuredPostsContainer}>\r\n          <PostsGrid posts={posts} />\r\n          <Pagination\r\n            showSizeChanger\r\n            onShowSizeChange={onShowSizeChange}\r\n            pageSize={pageSize}\r\n            total={total}\r\n            defaultCurrent={currentPage}\r\n            onChange={onCurrentChange}\r\n          />\r\n        </section>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CategoryLayout"]},"metadata":{},"sourceType":"module"}