{"ast":null,"code":"var _jsxFileName = \"D:\\\\Site\\\\showandnews\\\\components\\\\layouts\\\\pages\\\\TagLayout\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport classnames from 'classnames';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styles from './styles.module.scss';\nconst GET_POSTS = gql`\n  query getPostsByTag($tagSlug: String, $offset: Int, $limit: Int) {\n    getPostsByTag(tagSlug: $tagSlug, offset: $offset, limit: $limit) {\n      id\n      image\n      title\n      content\n      created_at\n      category\n      description\n      author\n      tags\n      slug\n    }\n  }\n`;\n\nconst TagLayout = ({\n  slug: tagSlug\n}) => {\n  const initialOffset = 0;\n  const initialLimit = 1000;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_POSTS, {\n    variables: {\n      tagSlug,\n      offset: initialOffset,\n      limit: initialLimit\n    }\n  });\n  if (error) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, \"Error\");\n  if (loading) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  const fetchedPosts = data.getPostsByTag.map(post => _objectSpread({}, post));\n  return __jsx(\"pre\", {\n    className: classnames(styles.content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, JSON.stringify(fetchedPosts, null, 2));\n};\n\nexport default TagLayout;","map":{"version":3,"sources":["D:/Site/showandnews/components/layouts/pages/TagLayout/index.js"],"names":["classnames","gql","useQuery","styles","GET_POSTS","TagLayout","slug","tagSlug","initialOffset","initialLimit","loading","error","data","variables","offset","limit","fetchedPosts","getPostsByTag","map","post","content","JSON","stringify"],"mappings":";;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AAGA,MAAMC,SAAS,GAAGH,GAAI;;;;;;;;;;;;;;;CAAtB;;AAiBA,MAAMI,SAAS,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAEC;AAAR,CAAD,KAAuB;AACvC,QAAMC,aAAa,GAAG,CAAtB;AACA,QAAMC,YAAY,GAAG,IAArB;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BV,QAAQ,CAACE,SAAD,EAAY;AACnDS,IAAAA,SAAS,EAAE;AACTN,MAAAA,OADS;AAETO,MAAAA,MAAM,EAAEN,aAFC;AAGTO,MAAAA,KAAK,EAAEN;AAHE;AADwC,GAAZ,CAAzC;AAOA,MAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEb,QAAMM,YAAY,GAAGJ,IAAI,CAACK,aAAL,CAAmBC,GAAnB,CAAuBC,IAAI,sBAAUA,IAAV,CAA3B,CAArB;AAEA,SACE;AAAK,IAAA,SAAS,EAAEnB,UAAU,CAACG,MAAM,CAACiB,OAAR,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,CAACC,SAAL,CAAeN,YAAf,EAA6B,IAA7B,EAAmC,CAAnC,CADH,CADF;AAKD,CArBD;;AAuBA,eAAeX,SAAf","sourcesContent":["import classnames from 'classnames'\r\nimport { gql } from 'apollo-boost'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nimport styles from './styles.module.scss'\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query getPostsByTag($tagSlug: String, $offset: Int, $limit: Int) {\r\n    getPostsByTag(tagSlug: $tagSlug, offset: $offset, limit: $limit) {\r\n      id\r\n      image\r\n      title\r\n      content\r\n      created_at\r\n      category\r\n      description\r\n      author\r\n      tags\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\nconst TagLayout = ({ slug: tagSlug }) => {\r\n  const initialOffset = 0\r\n  const initialLimit = 1000\r\n\r\n  const { loading, error, data } = useQuery(GET_POSTS, {\r\n    variables: {\r\n      tagSlug,\r\n      offset: initialOffset,\r\n      limit: initialLimit\r\n    }\r\n  });\r\n  if (error) return <h1>Error</h1>\r\n  if (loading) return <h1>Loading...</h1>\r\n\r\n  const fetchedPosts = data.getPostsByTag.map(post => ({ ...post }))\r\n\r\n  return (\r\n    <pre className={classnames(styles.content)}>\r\n      {JSON.stringify(fetchedPosts, null, 2)}\r\n    </pre>\r\n  )\r\n}\r\n\r\nexport default TagLayout"]},"metadata":{},"sourceType":"module"}