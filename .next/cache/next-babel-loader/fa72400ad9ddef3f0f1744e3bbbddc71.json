{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Site\\\\showandnews\\\\components\\\\layouts\\\\pages\\\\TagLayout\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getPostsByTag($tagSlug: String, $offset: Int, $limit: Int) {\\n    getPostsByTag(tagSlug: $tagSlug, offset: $offset, limit: $limit) {\\n      id\\n      image\\n      title\\n      content\\n      created_at\\n      category\\n      description\\n      author\\n      tags\\n      slug\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport classnames from 'classnames';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styles from './styles.module.scss';\nvar GET_POSTS = gql(_templateObject());\n\nvar TagLayout = function TagLayout(_ref) {\n  _s();\n\n  var slug = _ref.slug;\n  var initialOffset = 0;\n  var initialLimit = 1000;\n\n  var _useQuery = useQuery(GET_POSTS, {\n    variables: {\n      tagSlug: slug,\n      offset: initialOffset,\n      limit: initialLimit\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, \"Error\");\n  if (loading) return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  var fetchedPosts = data.getPostsByTag.map(function (post) {\n    var _post;\n\n    return _post = post, id = _post.id, title = _post.title, description = _post.description, content = _post.content, datetime = _post.datetime, category = _post.category, tags = _post.tags, image = _post.image, slug = _post.slug, _post;\n  });\n  return __jsx(\"pre\", {\n    className: classnames(styles.content),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, JSON.stringify(fetchedPosts, null, 2));\n};\n\n_s(TagLayout, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = TagLayout;\nexport default TagLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"TagLayout\");","map":{"version":3,"sources":["D:/Site/showandnews/components/layouts/pages/TagLayout/index.js"],"names":["classnames","gql","useQuery","styles","GET_POSTS","TagLayout","slug","initialOffset","initialLimit","variables","tagSlug","offset","limit","loading","error","data","fetchedPosts","getPostsByTag","map","post","id","title","description","content","datetime","category","tags","image","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AAGA,IAAMC,SAAS,GAAGH,GAAH,mBAAf;;AAiBA,IAAMI,SAAS,GAAG,SAAZA,SAAY,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAC9B,MAAMC,aAAa,GAAG,CAAtB;AACA,MAAMC,YAAY,GAAG,IAArB;;AAF8B,kBAIGN,QAAQ,CAACE,SAAD,EAAY;AACnDK,IAAAA,SAAS,EAAE;AACTC,MAAAA,OAAO,EAAEJ,IADA;AAETK,MAAAA,MAAM,EAAEJ,aAFC;AAGTK,MAAAA,KAAK,EAAEJ;AAHE;AADwC,GAAZ,CAJX;AAAA,MAItBK,OAJsB,aAItBA,OAJsB;AAAA,MAIbC,KAJa,aAIbA,KAJa;AAAA,MAINC,IAJM,aAINA,IAJM;;AAW9B,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEb,MAAMG,YAAY,GAAGD,IAAI,CAACE,aAAL,CAAmBC,GAAnB,CAAuB,UAAAC,IAAI;AAAA;;AAAA,mBAU5CA,IAV4C,EAC9CC,EAD8C,SAC9CA,EAD8C,EAE9CC,KAF8C,SAE9CA,KAF8C,EAG9CC,WAH8C,SAG9CA,WAH8C,EAI9CC,OAJ8C,SAI9CA,OAJ8C,EAK9CC,QAL8C,SAK9CA,QAL8C,EAM9CC,QAN8C,SAM9CA,QAN8C,EAO9CC,IAP8C,SAO9CA,IAP8C,EAQ9CC,KAR8C,SAQ9CA,KAR8C,EAS9CrB,IAT8C,SAS9CA,IAT8C;AAAA,GAA3B,CAArB;AAYA,SACE;AAAK,IAAA,SAAS,EAAEN,UAAU,CAACG,MAAM,CAACoB,OAAR,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,IAAI,CAACC,SAAL,CAAeb,YAAf,EAA6B,IAA7B,EAAmC,CAAnC,CADH,CADF;AAKD,CA/BD;;GAAMX,S;UAI6BH,Q;;;KAJ7BG,S;AAiCN,eAAeA,SAAf","sourcesContent":["import classnames from 'classnames'\r\nimport { gql } from 'apollo-boost'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nimport styles from './styles.module.scss'\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query getPostsByTag($tagSlug: String, $offset: Int, $limit: Int) {\r\n    getPostsByTag(tagSlug: $tagSlug, offset: $offset, limit: $limit) {\r\n      id\r\n      image\r\n      title\r\n      content\r\n      created_at\r\n      category\r\n      description\r\n      author\r\n      tags\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\nconst TagLayout = ({ slug }) => {\r\n  const initialOffset = 0\r\n  const initialLimit = 1000\r\n\r\n  const { loading, error, data } = useQuery(GET_POSTS, {\r\n    variables: {\r\n      tagSlug: slug,\r\n      offset: initialOffset, \r\n      limit: initialLimit\r\n    }\r\n  });\r\n  if (error) return <h1>Error</h1>\r\n  if (loading) return <h1>Loading...</h1>\r\n\r\n  const fetchedPosts = data.getPostsByTag.map(post => ({\r\n    id,\r\n    title,\r\n    description,\r\n    content,\r\n    datetime,\r\n    category,\r\n    tags,\r\n    image,\r\n    slug\r\n  } = post))\r\n\r\n  return (\r\n    <pre className={classnames(styles.content)}>\r\n      {JSON.stringify(fetchedPosts, null, 2)}\r\n    </pre>\r\n  )\r\n}\r\n\r\nexport default TagLayout"]},"metadata":{},"sourceType":"module"}