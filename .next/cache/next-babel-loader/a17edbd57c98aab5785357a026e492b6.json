{"ast":null,"code":"var _jsxFileName = \"D:\\\\Site\\\\showandnews\\\\components\\\\layouts\\\\pages\\\\CategoryLayout\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport useUpdateEffect from './hooks';\nimport styles from './styles.module.scss';\nimport PostsGrid from '@/components/feed/PostsGrid';\nconst GET_POSTS = gql`\n  query getPostsByCategory($catSlug: String, $pass: Int, $quantity: Int) {\n    getPostsByCategory(catSlug: $catSlug, pass: $pass, quantity: $quantity) {\n      id\n      image\n      title\n      content\n      created_at\n      category\n      description\n      author\n      tags\n      slug\n    }\n  }\n`;\n\nconst CategoryLayout = ({\n  slug: catSlug,\n  pass,\n  quantity\n}) => {\n  const {\n    0: pageSize,\n    1: setPageSize\n  } = useState(9);\n  const {\n    0: current,\n    1: setCurrent\n  } = useState(1);\n  const paginatedPosts = useMemo(() => {\n    const lastIndex = current * pageSize;\n    const firstIndex = lastIndex - pageSize;\n  }, [current, pageSize]);\n  useUpdateEffect(() => {\n    window.scroll({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, [current, pageSize]);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_POSTS, {\n    variables: {\n      catSlug,\n      pass,\n      quantity\n    }\n  });\n  if (error) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }, \"Error\");\n  if (loading) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  const posts = data.getPostsByCategory.map(post => ({\n    title: post.title,\n    description: post.description,\n    content: post.content,\n    datetime: post.created_at,\n    category: post.category,\n    tags: post.tags,\n    image: post.image,\n    slug: post.slug\n  }));\n  return __jsx(\"section\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: styles.featuredPostsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(PostsGrid, {\n    posts: posts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }), __jsx(Pagination // showSizeChanger\n  , {\n    onShowSizeChange: setPageSize,\n    pageSize: pageSize,\n    total: posts.length,\n    defaultCurrent: current,\n    onChange: setCurrent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CategoryLayout;","map":{"version":3,"sources":["D:/Site/showandnews/components/layouts/pages/CategoryLayout/index.js"],"names":["useState","useMemo","useQuery","gql","useUpdateEffect","styles","PostsGrid","GET_POSTS","CategoryLayout","slug","catSlug","pass","quantity","pageSize","setPageSize","current","setCurrent","paginatedPosts","lastIndex","firstIndex","window","scroll","top","behavior","loading","error","data","variables","posts","getPostsByCategory","map","post","title","description","content","datetime","created_at","category","tags","image","container","row","featuredPostsContainer","length"],"mappings":"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","sourcesContent":["import { useState, useMemo } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { gql } from 'apollo-boost'\r\n\r\nimport useUpdateEffect from './hooks'\r\nimport styles from './styles.module.scss'\r\nimport PostsGrid from '@/components/feed/PostsGrid'\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query getPostsByCategory($catSlug: String, $pass: Int, $quantity: Int) {\r\n    getPostsByCategory(catSlug: $catSlug, pass: $pass, quantity: $quantity) {\r\n      id\r\n      image\r\n      title\r\n      content\r\n      created_at\r\n      category\r\n      description\r\n      author\r\n      tags\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\n\r\nconst CategoryLayout = ({ slug: catSlug, pass, quantity }) => {\r\n  const [pageSize, setPageSize] = useState(9)\r\n  const [current, setCurrent] = useState(1);\r\n\r\n  \r\n  const paginatedPosts = useMemo(() => {\r\n    const lastIndex = current * pageSize\r\n    const firstIndex = lastIndex - pageSize\r\n  }, [current, pageSize])\r\n\r\n  useUpdateEffect(() => {\r\n    window.scroll({ top: 0, behavior: 'smooth' })\r\n  }, [current, pageSize])\r\n\r\n  const { loading, error, data } = useQuery(GET_POSTS, {\r\n    variables: {\r\n      catSlug,\r\n      pass,\r\n      quantity\r\n    }\r\n  });\r\n  if (error) return <h1>Error</h1>\r\n  if (loading) return <h1>Loading...</h1>\r\n\r\n  const posts = data.getPostsByCategory.map((post, ) => ({\r\n    title: post.title,\r\n    description: post.description,\r\n    content: post.content,\r\n    datetime: post.created_at,\r\n    category: post.category,\r\n    tags: post.tags,\r\n    image: post.image,\r\n    slug: post.slug\r\n  }))\r\n\r\n  return (\r\n    <section className={styles.container}>\r\n      <div className={styles.row}>\r\n        <section className={styles.featuredPostsContainer}>\r\n          <PostsGrid posts={posts} />\r\n          <Pagination\r\n            // showSizeChanger\r\n            onShowSizeChange={setPageSize}\r\n            pageSize={pageSize}\r\n            total={posts.length}\r\n            defaultCurrent={current}\r\n            onChange={setCurrent}\r\n          />\r\n        </section>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CategoryLayout"]},"metadata":{},"sourceType":"module"}