{"ast":null,"code":"var _jsxFileName = \"D:\\\\Site\\\\showandnews\\\\components\\\\layouts\\\\pages\\\\TagLayout\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport classnames from 'classnames';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport styles from './styles.module.scss';\nconst GET_POSTS = gql`\n  query getPostsByTag($tagSlug: String, $offset: Int, $limit: Int) {\n    getPostsByTag(tagSlug: $tagSlug, offset: $offset, limit: $limit) {\n      id\n      image\n      title\n      content\n      created_at\n      category\n      description\n      author\n      tags\n      slug\n    }\n  }\n`;\n\nconst TagLayout = ({\n  slug\n}) => {\n  const initialOffset = 0;\n  const initialLimit = 1000;\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_POSTS, {\n    variables: {\n      tagSlug,\n      offset: initialOffset,\n      limit: initialLimit\n    }\n  });\n  if (error) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, \"Error\");\n  if (loading) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  const fetchedPosts = data.getPostsByTag.map(post => ({\n    id,\n    title,\n    description,\n    content,\n    datetime,\n    category,\n    tags,\n    image,\n    slug\n  } = post));\n  return __jsx(\"pre\", {\n    className: classnames(styles.content),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, JSON.stringify(fetchedPosts, null, 2));\n};\n\nexport default TagLayout;","map":{"version":3,"sources":["D:/Site/showandnews/components/layouts/pages/TagLayout/index.js"],"names":["classnames","gql","useQuery","styles","GET_POSTS","TagLayout","slug","initialOffset","initialLimit","loading","error","data","variables","tagSlug","offset","limit","fetchedPosts","getPostsByTag","map","post","id","title","description","content","datetime","category","tags","image","JSON","stringify"],"mappings":";;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AAGA,MAAMC,SAAS,GAAGH,GAAI;;;;;;;;;;;;;;;CAAtB;;AAiBA,MAAMI,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC9B,QAAMC,aAAa,GAAG,CAAtB;AACA,QAAMC,YAAY,GAAG,IAArB;AAEA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACE,SAAD,EAAY;AACnDQ,IAAAA,SAAS,EAAE;AACTC,MAAAA,OADS;AAETC,MAAAA,MAAM,EAAEP,aAFC;AAGTQ,MAAAA,KAAK,EAAEP;AAHE;AADwC,GAAZ,CAAzC;AAOA,MAAIE,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEb,QAAMO,YAAY,GAAGL,IAAI,CAACM,aAAL,CAAmBC,GAAnB,CAAuBC,IAAI,KAAK;AACnDC,IAAAA,EADmD;AAEnDC,IAAAA,KAFmD;AAGnDC,IAAAA,WAHmD;AAInDC,IAAAA,OAJmD;AAKnDC,IAAAA,QALmD;AAMnDC,IAAAA,QANmD;AAOnDC,IAAAA,IAPmD;AAQnDC,IAAAA,KARmD;AASnDrB,IAAAA;AATmD,MAUjDa,IAV4C,CAA3B,CAArB;AAYA,SACE;AAAK,IAAA,SAAS,EAAEnB,UAAU,CAACG,MAAM,CAACoB,OAAR,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,IAAI,CAACC,SAAL,CAAeb,YAAf,EAA6B,IAA7B,EAAmC,CAAnC,CADH,CADF;AAKD,CA/BD;;AAiCA,eAAeX,SAAf","sourcesContent":["import classnames from 'classnames'\r\nimport { gql } from 'apollo-boost'\r\nimport { useQuery } from '@apollo/react-hooks'\r\n\r\nimport styles from './styles.module.scss'\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query getPostsByTag($tagSlug: String, $offset: Int, $limit: Int) {\r\n    getPostsByTag(tagSlug: $tagSlug, offset: $offset, limit: $limit) {\r\n      id\r\n      image\r\n      title\r\n      content\r\n      created_at\r\n      category\r\n      description\r\n      author\r\n      tags\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\nconst TagLayout = ({ slug }) => {\r\n  const initialOffset = 0\r\n  const initialLimit = 1000\r\n\r\n  const { loading, error, data } = useQuery(GET_POSTS, {\r\n    variables: {\r\n      tagSlug,\r\n      offset: initialOffset, \r\n      limit: initialLimit\r\n    }\r\n  });\r\n  if (error) return <h1>Error</h1>\r\n  if (loading) return <h1>Loading...</h1>\r\n\r\n  const fetchedPosts = data.getPostsByTag.map(post => ({\r\n    id,\r\n    title,\r\n    description,\r\n    content,\r\n    datetime,\r\n    category,\r\n    tags,\r\n    image,\r\n    slug\r\n  } = post))\r\n\r\n  return (\r\n    <pre className={classnames(styles.content)}>\r\n      {JSON.stringify(fetchedPosts, null, 2)}\r\n    </pre>\r\n  )\r\n}\r\n\r\nexport default TagLayout"]},"metadata":{},"sourceType":"module"}