{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"D:\\\\Site\\\\showandnews\\\\components\\\\layouts\\\\pages\\\\CategoryLayout\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getPostsByCategory($catSlug: String, $pass: Int, $quantity: Int) {\\n    getPostsByCategory(catSlug: $catSlug, pass: $pass, quantity: $quantity) {\\n      id\\n      image\\n      title\\n      content\\n      created_at\\n      category\\n      description\\n      author\\n      tags\\n      slug\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useMemo } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport useUpdateEffect from './hooks';\nimport styles from './styles.module.scss';\nimport PostsGrid from '@/components/feed/PostsGrid';\nvar GET_POSTS = gql(_templateObject());\n\nvar CategoryLayout = function CategoryLayout(_ref) {\n  _s();\n\n  var catSlug = _ref.slug,\n      pass = _ref.pass,\n      quantity = _ref.quantity;\n\n  var _useQuery = useQuery(GET_POSTS, {\n    variables: {\n      catSlug: catSlug,\n      pass: pass,\n      quantity: quantity\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (error) return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, \"Error\");\n  if (loading) return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  var posts = data.getPostsByCategory.map(function (post) {\n    return {\n      title: post.title,\n      description: post.description,\n      content: post.content,\n      datetime: post.created_at,\n      category: post.category,\n      tags: post.tags,\n      image: post.image,\n      slug: post.slug\n    };\n  });\n  return __jsx(\"section\", {\n    className: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.row,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: styles.featuredPostsContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, __jsx(PostsGrid, {\n    posts: posts,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), __jsx(Pagination // showSizeChanger\n  , {\n    onShowSizeChange: setPageSize,\n    pageSize: pageSize,\n    total: posts.length,\n    defaultCurrent: current,\n    onChange: setCurrent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(CategoryLayout, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = CategoryLayout;\nexport default CategoryLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryLayout\");","map":{"version":3,"sources":["D:/Site/showandnews/components/layouts/pages/CategoryLayout/index.js"],"names":["useState","useMemo","useQuery","gql","useUpdateEffect","styles","PostsGrid","GET_POSTS","CategoryLayout","catSlug","slug","pass","quantity","variables","loading","error","data","posts","getPostsByCategory","map","post","title","description","content","datetime","created_at","category","tags","image","container","row","featuredPostsContainer","setPageSize","pageSize","length","current","setCurrent"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,OAAOC,eAAP,MAA4B,SAA5B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAGA,IAAMC,SAAS,GAAGJ,GAAH,mBAAf;;AAkBA,IAAMK,cAAc,GAAG,SAAjBA,cAAiB,OAAuC;AAAA;;AAAA,MAA9BC,OAA8B,QAApCC,IAAoC;AAAA,MAArBC,IAAqB,QAArBA,IAAqB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBAE3BV,QAAQ,CAACK,SAAD,EAAY;AACnDM,IAAAA,SAAS,EAAE;AACTJ,MAAAA,OAAO,EAAPA,OADS;AAETE,MAAAA,IAAI,EAAJA,IAFS;AAGTC,MAAAA,QAAQ,EAARA;AAHS;AADwC,GAAZ,CAFmB;AAAA,MAEpDE,OAFoD,aAEpDA,OAFoD;AAAA,MAE3CC,KAF2C,aAE3CA,KAF2C;AAAA,MAEpCC,IAFoC,aAEpCA,IAFoC;;AAS5D,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEb,MAAMG,KAAK,GAAGD,IAAI,CAACE,kBAAL,CAAwBC,GAAxB,CAA4B,UAAAC,IAAI;AAAA,WAAK;AACjDC,MAAAA,KAAK,EAAED,IAAI,CAACC,KADqC;AAEjDC,MAAAA,WAAW,EAAEF,IAAI,CAACE,WAF+B;AAGjDC,MAAAA,OAAO,EAAEH,IAAI,CAACG,OAHmC;AAIjDC,MAAAA,QAAQ,EAAEJ,IAAI,CAACK,UAJkC;AAKjDC,MAAAA,QAAQ,EAAEN,IAAI,CAACM,QALkC;AAMjDC,MAAAA,IAAI,EAAEP,IAAI,CAACO,IANsC;AAOjDC,MAAAA,KAAK,EAAER,IAAI,CAACQ,KAPqC;AAQjDlB,MAAAA,IAAI,EAAEU,IAAI,CAACV;AARsC,KAAL;AAAA,GAAhC,CAAd;AAYA,SACE;AAAS,IAAA,SAAS,EAAEL,MAAM,CAACwB,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAExB,MAAM,CAACyB,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAEzB,MAAM,CAAC0B,sBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAEd,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD,CACE;AADF;AAEE,IAAA,gBAAgB,EAAEe,WAFpB;AAGE,IAAA,QAAQ,EAAEC,QAHZ;AAIE,IAAA,KAAK,EAAEhB,KAAK,CAACiB,MAJf;AAKE,IAAA,cAAc,EAAEC,OALlB;AAME,IAAA,QAAQ,EAAEC,UANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CADF;AAiBD,CAzCD;;GAAM5B,c;UAE6BN,Q;;;KAF7BM,c;AA2CN,eAAeA,cAAf","sourcesContent":["import { useState, useMemo } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { gql } from 'apollo-boost'\r\n\r\nimport useUpdateEffect from './hooks'\r\nimport styles from './styles.module.scss'\r\nimport PostsGrid from '@/components/feed/PostsGrid'\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query getPostsByCategory($catSlug: String, $pass: Int, $quantity: Int) {\r\n    getPostsByCategory(catSlug: $catSlug, pass: $pass, quantity: $quantity) {\r\n      id\r\n      image\r\n      title\r\n      content\r\n      created_at\r\n      category\r\n      description\r\n      author\r\n      tags\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\n\r\nconst CategoryLayout = ({ slug: catSlug, pass, quantity }) => {\r\n\r\n  const { loading, error, data } = useQuery(GET_POSTS, {\r\n    variables: {\r\n      catSlug,\r\n      pass,\r\n      quantity\r\n    }\r\n  });\r\n  if (error) return <h1>Error</h1>\r\n  if (loading) return <h1>Loading...</h1>\r\n\r\n  const posts = data.getPostsByCategory.map(post => ({\r\n    title: post.title,\r\n    description: post.description,\r\n    content: post.content,\r\n    datetime: post.created_at,\r\n    category: post.category,\r\n    tags: post.tags,\r\n    image: post.image,\r\n    slug: post.slug\r\n  }\r\n  ))\r\n\r\n  return (\r\n    <section className={styles.container}>\r\n      <div className={styles.row}>\r\n        <section className={styles.featuredPostsContainer}>\r\n          <PostsGrid posts={posts} />\r\n          <Pagination\r\n            // showSizeChanger\r\n            onShowSizeChange={setPageSize}\r\n            pageSize={pageSize}\r\n            total={posts.length}\r\n            defaultCurrent={current}\r\n            onChange={setCurrent}\r\n          />\r\n        </section>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CategoryLayout"]},"metadata":{},"sourceType":"module"}