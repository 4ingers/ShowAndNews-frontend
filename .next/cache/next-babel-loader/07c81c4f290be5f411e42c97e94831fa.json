{"ast":null,"code":"var _jsxFileName = \"D:\\\\Site\\\\showandnews\\\\components\\\\layouts\\\\pages\\\\CategoryLayout\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { Pagination } from 'antd';\nimport { useUpdateEffect } from '@/hooks';\nimport styles from './styles.module.scss';\nimport PostsGrid from '@/components/feed/PostsGrid';\nconst GET_POSTS = gql`\n  query getPostsByCategory($catSlug: String, $offset: Int, $limit: Int) {\n    getPostsByCategoryCount(catSlug: $catSlug)\n    getPostsByCategory(catSlug: $catSlug, offset: $offset, limit: $limit) {\n      id\n      image\n      title\n      content\n      createdAt\n      category\n      description\n      author\n      tagsName\n      slug\n    }\n  }\n`;\n\nconst CategoryLayout = ({\n  slug: catSlug\n}) => {\n  const initialPageSize = 9;\n  const {\n    0: pageSize,\n    1: setPageSize\n  } = useState(initialPageSize);\n  const {\n    0: current,\n    1: setCurrent\n  } = useState(1);\n  useUpdateEffect(() => {\n    window.scroll({\n      top: 0,\n      behavior: 'smooth'\n    });\n  }, [current, pageSize]);\n\n  const onShowSizeChange = (_, pageSize) => {\n    setCurrent(1);\n    setPageSize(pageSize);\n  };\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_POSTS, {\n    variables: {\n      catSlug,\n      offset: (current - 1) * pageSize,\n      limit: pageSize\n    }\n  });\n  if (error) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430!\");\n  if (loading) return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 23\n    }\n  }, \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\");\n  const posts = data.getPostsByCategory.map(post => _objectSpread({}, post));\n  return __jsx(\"section\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styles.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, __jsx(\"section\", {\n    className: styles.featuredPostsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(PostsGrid, {\n    posts: posts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), __jsx(Pagination, {\n    showSizeChanger: true,\n    hideOnSinglePage: true,\n    onShowSizeChange: onShowSizeChange,\n    pageSize: pageSize,\n    total: data.getPostsByCategoryCount,\n    defaultCurrent: current,\n    onChange: setCurrent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default CategoryLayout;","map":{"version":3,"sources":["D:/Site/showandnews/components/layouts/pages/CategoryLayout/index.js"],"names":["useState","useQuery","gql","Pagination","useUpdateEffect","styles","PostsGrid","GET_POSTS","CategoryLayout","slug","catSlug","initialPageSize","pageSize","setPageSize","current","setCurrent","window","scroll","top","behavior","onShowSizeChange","_","loading","error","data","variables","offset","limit","posts","getPostsByCategory","map","post","container","row","featuredPostsContainer","getPostsByCategoryCount"],"mappings":";;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,SAASC,UAAT,QAA2B,MAA3B;AAEA,SAASC,eAAT,QAAgC,SAAhC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AAGA,MAAMC,SAAS,GAAGL,GAAI;;;;;;;;;;;;;;;;CAAtB;;AAmBA,MAAMM,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAEC;AAAR,CAAD,KAAuB;AAC5C,QAAMC,eAAe,GAAG,CAAxB;AAEA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0Bb,QAAQ,CAACW,eAAD,CAAxC;AACA,QAAM;AAAA,OAACG,OAAD;AAAA,OAAUC;AAAV,MAAwBf,QAAQ,CAAC,CAAD,CAAtC;AAEAI,EAAAA,eAAe,CAAC,MAAM;AACpBY,IAAAA,MAAM,CAACC,MAAP,CAAc;AAAEC,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,QAAQ,EAAE;AAApB,KAAd;AACD,GAFc,EAEZ,CAACL,OAAD,EAAUF,QAAV,CAFY,CAAf;;AAIA,QAAMQ,gBAAgB,GAAG,CAACC,CAAD,EAAIT,QAAJ,KAAiB;AACxCG,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAF,IAAAA,WAAW,CAACD,QAAD,CAAX;AACD,GAHD;;AAKA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BvB,QAAQ,CAACM,SAAD,EAAY;AACnDkB,IAAAA,SAAS,EAAE;AACTf,MAAAA,OADS;AAETgB,MAAAA,MAAM,EAAE,CAACZ,OAAO,GAAG,CAAX,IAAgBF,QAFf;AAGTe,MAAAA,KAAK,EAAEf;AAHE;AADwC,GAAZ,CAAzC;AAOA,MAAIW,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAP;AACX,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DAAP;AAEb,QAAMM,KAAK,GAAGJ,IAAI,CAACK,kBAAL,CAAwBC,GAAxB,CAA6BC,IAAD,sBACrCA,IADqC,CAA5B,CAAd;AAIA,SACE;AAAS,IAAA,SAAS,EAAE1B,MAAM,CAAC2B,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAE3B,MAAM,CAAC4B,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAE5B,MAAM,CAAC6B,sBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAEN,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,UAAD;AACE,IAAA,eAAe,MADjB;AAEE,IAAA,gBAAgB,MAFlB;AAGE,IAAA,gBAAgB,EAAER,gBAHpB;AAIE,IAAA,QAAQ,EAAER,QAJZ;AAKE,IAAA,KAAK,EAAEY,IAAI,CAACW,uBALd;AAME,IAAA,cAAc,EAAErB,OANlB;AAOE,IAAA,QAAQ,EAAEC,UAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CADF;AAkBD,CA/CD;;AAiDA,eAAeP,cAAf","sourcesContent":["import { useState } from 'react'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { gql } from 'apollo-boost'\r\nimport { Pagination } from 'antd'\r\n\r\nimport { useUpdateEffect } from '@/hooks'\r\nimport styles from './styles.module.scss'\r\nimport PostsGrid from '@/components/feed/PostsGrid'\r\n\r\n\r\nconst GET_POSTS = gql`\r\n  query getPostsByCategory($catSlug: String, $offset: Int, $limit: Int) {\r\n    getPostsByCategoryCount(catSlug: $catSlug)\r\n    getPostsByCategory(catSlug: $catSlug, offset: $offset, limit: $limit) {\r\n      id\r\n      image\r\n      title\r\n      content\r\n      createdAt\r\n      category\r\n      description\r\n      author\r\n      tagsName\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\n\r\nconst CategoryLayout = ({ slug: catSlug }) => {\r\n  const initialPageSize = 9\r\n  \r\n  const [pageSize, setPageSize] = useState(initialPageSize)\r\n  const [current, setCurrent] = useState(1)\r\n  \r\n  useUpdateEffect(() => {\r\n    window.scroll({ top: 0, behavior: 'smooth' })\r\n  }, [current, pageSize])\r\n  \r\n  const onShowSizeChange = (_, pageSize) => {\r\n    setCurrent(1)\r\n    setPageSize(pageSize)\r\n  }\r\n  \r\n  const { loading, error, data } = useQuery(GET_POSTS, {\r\n    variables: {\r\n      catSlug,\r\n      offset: (current - 1) * pageSize,\r\n      limit: pageSize\r\n    }\r\n  })\r\n  if (error) return <h1>Ошибка!</h1>\r\n  if (loading) return <h1>Загрузка...</h1>\r\n  \r\n  const posts = data.getPostsByCategory.map((post) => ({\r\n    ...post\r\n  }))\r\n\r\n  return (\r\n    <section className={styles.container}>\r\n      <div className={styles.row}>\r\n        <section className={styles.featuredPostsContainer}>\r\n          <PostsGrid posts={posts} />\r\n          <Pagination\r\n            showSizeChanger\r\n            hideOnSinglePage\r\n            onShowSizeChange={onShowSizeChange}\r\n            pageSize={pageSize}\r\n            total={data.getPostsByCategoryCount}\r\n            defaultCurrent={current}\r\n            onChange={setCurrent}\r\n          />\r\n        </section>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default CategoryLayout"]},"metadata":{},"sourceType":"module"}